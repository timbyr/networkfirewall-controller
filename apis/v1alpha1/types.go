// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// A custom action to use in stateless rule actions settings. This is used in
// CustomAction.
type ActionDefinition struct {
	// Stateless inspection criteria that publishes the specified metrics to Amazon
	// CloudWatch for the matching packet. This setting defines a CloudWatch dimension
	// value to be published.
	PublishMetricAction *PublishMetricAction `json:"publishMetricAction,omitempty"`
}

// A single IP address specification. This is used in the MatchAttributes source
// and destination specifications.
type Address struct {
	AddressDefinition *string `json:"addressDefinition,omitempty"`
}

// The configuration and status for a single subnet that you've specified for
// use by the AWS Network Firewall firewall. This is part of the FirewallStatus.
type Attachment struct {
	EndpointID *string `json:"endpointID,omitempty"`
	Status     *string `json:"status,omitempty"`
	SubnetID   *string `json:"subnetID,omitempty"`
}

// An optional, non-standard action to use for stateless packet handling. You
// can define this in addition to the standard action that you must specify.
//
// You define and name the custom actions that you want to be able to use, and
// then you reference them by name in your actions settings.
//
// You can use custom actions in the following places:
//
//    * In a rule group's StatelessRulesAndCustomActions specification. The
//    custom actions are available for use by name inside the StatelessRulesAndCustomActions
//    where you define them. You can use them for your stateless rule actions
//    to specify what to do with a packet that matches the rule's match attributes.
//
//    * In a FirewallPolicy specification, in StatelessCustomActions. The custom
//    actions are available for use inside the policy where you define them.
//    You can use them for the policy's default stateless actions settings to
//    specify what to do with packets that don't match any of the policy's stateless
//    rules.
type CustomAction struct {
	// A custom action to use in stateless rule actions settings. This is used in
	// CustomAction.
	ActionDefinition *ActionDefinition `json:"actionDefinition,omitempty"`
	ActionName       *string           `json:"actionName,omitempty"`
}

// The value to use in an Amazon CloudWatch custom metric dimension. This is
// used in the PublishMetrics CustomAction. A CloudWatch custom metric dimension
// is a name/value pair that's part of the identity of a metric.
//
// AWS Network Firewall sets the dimension name to CustomAction and you provide
// the dimension value.
//
// For more information about CloudWatch custom metric dimensions, see Publishing
// Custom Metrics (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#usingDimensions)
// in the Amazon CloudWatch User Guide (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
type Dimension struct {
	Value *string `json:"value,omitempty"`
}

// High-level information about a firewall, returned by operations like create
// and describe. You can use the information provided in the metadata to retrieve
// and manage a firewall.
type FirewallMetadata struct {
	FirewallARN  *string `json:"firewallARN,omitempty"`
	FirewallName *string `json:"firewallName,omitempty"`
}

// High-level information about a firewall policy, returned by operations like
// create and describe. You can use the information provided in the metadata
// to retrieve and manage a firewall policy. You can retrieve all objects for
// a firewall policy by calling DescribeFirewallPolicy.
type FirewallPolicyMetadata struct {
	ARN  *string `json:"arn,omitempty"`
	Name *string `json:"name,omitempty"`
}

// The high-level properties of a firewall policy. This, along with the FirewallPolicy,
// define the policy. You can retrieve all objects for a firewall policy by
// calling DescribeFirewallPolicy.
type FirewallPolicyResponse struct {
	ConsumedStatefulRuleCapacity  *int64  `json:"consumedStatefulRuleCapacity,omitempty"`
	ConsumedStatelessRuleCapacity *int64  `json:"consumedStatelessRuleCapacity,omitempty"`
	Description                   *string `json:"description,omitempty"`
	FirewallPolicyARN             *string `json:"firewallPolicyARN,omitempty"`
	FirewallPolicyID              *string `json:"firewallPolicyID,omitempty"`
	FirewallPolicyName            *string `json:"firewallPolicyName,omitempty"`
	FirewallPolicyStatus          *string `json:"firewallPolicyStatus,omitempty"`
	NumberOfAssociations          *int64  `json:"numberOfAssociations,omitempty"`
	Tags                          []*Tag  `json:"tags,omitempty"`
}

// The firewall policy defines the behavior of a firewall using a collection
// of stateless and stateful rule groups and other settings. You can use one
// firewall policy for multiple firewalls.
//
// This, along with FirewallPolicyResponse, define the policy. You can retrieve
// all objects for a firewall policy by calling DescribeFirewallPolicy.
type FirewallPolicy_SDK struct {
	StatefulDefaultActions []*string `json:"statefulDefaultActions,omitempty"`
	// Configuration settings for the handling of the stateful rule groups in a
	// firewall policy.
	StatefulEngineOptions           *StatefulEngineOptions         `json:"statefulEngineOptions,omitempty"`
	StatefulRuleGroupReferences     []*StatefulRuleGroupReference  `json:"statefulRuleGroupReferences,omitempty"`
	StatelessCustomActions          []*CustomAction                `json:"statelessCustomActions,omitempty"`
	StatelessDefaultActions         []*string                      `json:"statelessDefaultActions,omitempty"`
	StatelessFragmentDefaultActions []*string                      `json:"statelessFragmentDefaultActions,omitempty"`
	StatelessRuleGroupReferences    []*StatelessRuleGroupReference `json:"statelessRuleGroupReferences,omitempty"`
}

// Detailed information about the current status of a Firewall. You can retrieve
// this for a firewall by calling DescribeFirewall and providing the firewall
// name and ARN.
type FirewallStatus_SDK struct {
	ConfigurationSyncStateSummary *string               `json:"configurationSyncStateSummary,omitempty"`
	Status                        *string               `json:"status,omitempty"`
	SyncStates                    map[string]*SyncState `json:"syncStates,omitempty"`
}

// The firewall defines the configuration settings for an AWS Network Firewall
// firewall. These settings include the firewall policy, the subnets in your
// VPC to use for the firewall endpoints, and any tags that are attached to
// the firewall AWS resource.
//
// The status of the firewall, for example whether it's ready to filter network
// traffic, is provided in the corresponding FirewallStatus. You can retrieve
// both objects by calling DescribeFirewall.
type Firewall_SDK struct {
	DeleteProtection               *bool            `json:"deleteProtection,omitempty"`
	Description                    *string          `json:"description,omitempty"`
	FirewallARN                    *string          `json:"firewallARN,omitempty"`
	FirewallID                     *string          `json:"firewallID,omitempty"`
	FirewallName                   *string          `json:"firewallName,omitempty"`
	FirewallPolicyARN              *string          `json:"firewallPolicyARN,omitempty"`
	FirewallPolicyChangeProtection *bool            `json:"firewallPolicyChangeProtection,omitempty"`
	SubnetChangeProtection         *bool            `json:"subnetChangeProtection,omitempty"`
	SubnetMappings                 []*SubnetMapping `json:"subnetMappings,omitempty"`
	Tags                           []*Tag           `json:"tags,omitempty"`
	VPCID                          *string          `json:"vpcID,omitempty"`
}

// The basic rule criteria for AWS Network Firewall to use to inspect packet
// headers in stateful traffic flow inspection. Traffic flows that match the
// criteria are a match for the corresponding StatefulRule.
type Header struct {
	Destination     *string `json:"destination,omitempty"`
	DestinationPort *string `json:"destinationPort,omitempty"`
	Direction       *string `json:"direction,omitempty"`
	Protocol        *string `json:"protocol,omitempty"`
	Source          *string `json:"source,omitempty"`
	SourcePort      *string `json:"sourcePort,omitempty"`
}

// A list of IP addresses and address ranges, in CIDR notation. This is part
// of a RuleVariables.
type IPSet struct {
	Definition []*string `json:"definition,omitempty"`
}

// Criteria for Network Firewall to use to inspect an individual packet in stateless
// rule inspection. Each match attributes set can include one or more items
// such as IP address, CIDR range, port number, protocol, and TCP flags.
type MatchAttributes struct {
	DestinationPorts []*PortRange    `json:"destinationPorts,omitempty"`
	Destinations     []*Address      `json:"destinations,omitempty"`
	Protocols        []*int64        `json:"protocols,omitempty"`
	SourcePorts      []*PortRange    `json:"sourcePorts,omitempty"`
	Sources          []*Address      `json:"sources,omitempty"`
	TCPFlags         []*TCPFlagField `json:"tcpFlags,omitempty"`
}

// Provides configuration status for a single policy or rule group that is used
// for a firewall endpoint. Network Firewall provides each endpoint with the
// rules that are configured in the firewall policy. Each time you add a subnet
// or modify the associated firewall policy, Network Firewall synchronizes the
// rules in the endpoint, so it can properly filter network traffic. This is
// part of a SyncState for a firewall.
type PerObjectStatus struct {
	SyncStatus  *string `json:"syncStatus,omitempty"`
	UpdateToken *string `json:"updateToken,omitempty"`
}

// A single port range specification. This is used for source and destination
// port ranges in the stateless rule MatchAttributes, SourcePorts, and DestinationPorts
// settings.
type PortRange struct {
	FromPort *int64 `json:"fromPort,omitempty"`
	ToPort   *int64 `json:"toPort,omitempty"`
}

// A set of port ranges for use in the rules in a rule group.
type PortSet struct {
	Definition []*string `json:"definition,omitempty"`
}

// Stateless inspection criteria that publishes the specified metrics to Amazon
// CloudWatch for the matching packet. This setting defines a CloudWatch dimension
// value to be published.
type PublishMetricAction struct {
	Dimensions []*Dimension `json:"dimensions,omitempty"`
}

// The inspection criteria and action for a single stateless rule. AWS Network
// Firewall inspects each packet for the specified matching criteria. When a
// packet matches the criteria, Network Firewall performs the rule's actions
// on the packet.
type RuleDefinition struct {
	Actions []*string `json:"actions,omitempty"`
	// Criteria for Network Firewall to use to inspect an individual packet in stateless
	// rule inspection. Each match attributes set can include one or more items
	// such as IP address, CIDR range, port number, protocol, and TCP flags.
	MatchAttributes *MatchAttributes `json:"matchAttributes,omitempty"`
}

// High-level information about a rule group, returned by ListRuleGroups. You
// can use the information provided in the metadata to retrieve and manage a
// rule group.
type RuleGroupMetadata struct {
	ARN  *string `json:"arn,omitempty"`
	Name *string `json:"name,omitempty"`
}

// The high-level properties of a rule group. This, along with the RuleGroup,
// define the rule group. You can retrieve all objects for a rule group by calling
// DescribeRuleGroup.
type RuleGroupResponse struct {
	Capacity             *int64  `json:"capacity,omitempty"`
	ConsumedCapacity     *int64  `json:"consumedCapacity,omitempty"`
	Description          *string `json:"description,omitempty"`
	NumberOfAssociations *int64  `json:"numberOfAssociations,omitempty"`
	RuleGroupARN         *string `json:"ruleGroupARN,omitempty"`
	RuleGroupID          *string `json:"ruleGroupID,omitempty"`
	RuleGroupName        *string `json:"ruleGroupName,omitempty"`
	RuleGroupStatus      *string `json:"ruleGroupStatus,omitempty"`
	Tags                 []*Tag  `json:"tags,omitempty"`
	Type                 *string `json:"type_,omitempty"`
}

// The object that defines the rules in a rule group. This, along with RuleGroupResponse,
// define the rule group. You can retrieve all objects for a rule group by calling
// DescribeRuleGroup.
//
// AWS Network Firewall uses a rule group to inspect and control network traffic.
// You define stateless rule groups to inspect individual packets and you define
// stateful rule groups to inspect packets in the context of their traffic flow.
//
// To use a rule group, you include it by reference in an Network Firewall firewall
// policy, then you use the policy in a firewall. You can reference a rule group
// from more than one firewall policy, and you can use a firewall policy in
// more than one firewall.
type RuleGroup_SDK struct {
	// Settings that are available for use in the rules in the RuleGroup where this
	// is defined.
	RuleVariables *RuleVariables `json:"ruleVariables,omitempty"`
	// The stateless or stateful rules definitions for use in a single rule group.
	// Each rule group requires a single RulesSource. You can use an instance of
	// this for either stateless rules or stateful rules.
	RulesSource *RulesSource `json:"rulesSource,omitempty"`
	// Additional options governing how Network Firewall handles the rule group.
	// You can only use these for stateful rule groups.
	StatefulRuleOptions *StatefulRuleOptions `json:"statefulRuleOptions,omitempty"`
}

// Additional settings for a stateful rule. This is part of the StatefulRule
// configuration.
type RuleOption struct {
	Keyword  *string   `json:"keyword,omitempty"`
	Settings []*string `json:"settings,omitempty"`
}

// Settings that are available for use in the rules in the RuleGroup where this
// is defined.
type RuleVariables struct {
	IPSets   map[string]*IPSet   `json:"iPSets,omitempty"`
	PortSets map[string]*PortSet `json:"portSets,omitempty"`
}

// The stateless or stateful rules definitions for use in a single rule group.
// Each rule group requires a single RulesSource. You can use an instance of
// this for either stateless rules or stateful rules.
type RulesSource struct {
	// Stateful inspection criteria for a domain list rule group.
	//
	// For HTTPS traffic, domain filtering is SNI-based. It uses the server name
	// indicator extension of the TLS handshake.
	//
	// By default, Network Firewall domain list inspection only includes traffic
	// coming from the VPC where you deploy the firewall. To inspect traffic from
	// IP addresses outside of the deployment VPC, you set the HOME_NET rule variable
	// to include the CIDR range of the deployment VPC plus the other CIDR ranges.
	// For more information, see RuleVariables in this guide and Stateful domain
	// list rule groups in AWS Network Firewall (https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-rule-groups-domain-names.html)
	// in the Network Firewall Developer Guide.
	RulesSourceList *RulesSourceList `json:"rulesSourceList,omitempty"`
	RulesString     *string          `json:"rulesString,omitempty"`
	StatefulRules   []*StatefulRule  `json:"statefulRules,omitempty"`
	// Stateless inspection criteria. Each stateless rule group uses exactly one
	// of these data types to define its stateless rules.
	StatelessRulesAndCustomActions *StatelessRulesAndCustomActions `json:"statelessRulesAndCustomActions,omitempty"`
}

// Stateful inspection criteria for a domain list rule group.
//
// For HTTPS traffic, domain filtering is SNI-based. It uses the server name
// indicator extension of the TLS handshake.
//
// By default, Network Firewall domain list inspection only includes traffic
// coming from the VPC where you deploy the firewall. To inspect traffic from
// IP addresses outside of the deployment VPC, you set the HOME_NET rule variable
// to include the CIDR range of the deployment VPC plus the other CIDR ranges.
// For more information, see RuleVariables in this guide and Stateful domain
// list rule groups in AWS Network Firewall (https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-rule-groups-domain-names.html)
// in the Network Firewall Developer Guide.
type RulesSourceList struct {
	GeneratedRulesType *string   `json:"generatedRulesType,omitempty"`
	TargetTypes        []*string `json:"targetTypes,omitempty"`
	Targets            []*string `json:"targets,omitempty"`
}

// Configuration settings for the handling of the stateful rule groups in a
// firewall policy.
type StatefulEngineOptions struct {
	RuleOrder *string `json:"ruleOrder,omitempty"`
}

// A single Suricata rules specification, for use in a stateful rule group.
// Use this option to specify a simple Suricata rule with protocol, source and
// destination, ports, direction, and rule options. For information about the
// Suricata Rules format, see Rules Format (https://suricata.readthedocs.io/en/suricata-5.0.0/rules/intro.html#).
type StatefulRule struct {
	Action *string `json:"action,omitempty"`
	// The basic rule criteria for AWS Network Firewall to use to inspect packet
	// headers in stateful traffic flow inspection. Traffic flows that match the
	// criteria are a match for the corresponding StatefulRule.
	Header      *Header       `json:"header,omitempty"`
	RuleOptions []*RuleOption `json:"ruleOptions,omitempty"`
}

// The setting that allows the policy owner to change the behavior of the rule
// group within a policy.
type StatefulRuleGroupOverride struct {
	Action *string `json:"action,omitempty"`
}

// Identifier for a single stateful rule group, used in a firewall policy to
// refer to a rule group.
type StatefulRuleGroupReference struct {
	// The setting that allows the policy owner to change the behavior of the rule
	// group within a policy.
	Override    *StatefulRuleGroupOverride `json:"override,omitempty"`
	Priority    *int64                     `json:"priority,omitempty"`
	ResourceARN *string                    `json:"resourceARN,omitempty"`
}

// Additional options governing how Network Firewall handles the rule group.
// You can only use these for stateful rule groups.
type StatefulRuleOptions struct {
	RuleOrder *string `json:"ruleOrder,omitempty"`
}

// A single stateless rule. This is used in StatelessRulesAndCustomActions.
type StatelessRule struct {
	Priority *int64 `json:"priority,omitempty"`
	// The inspection criteria and action for a single stateless rule. AWS Network
	// Firewall inspects each packet for the specified matching criteria. When a
	// packet matches the criteria, Network Firewall performs the rule's actions
	// on the packet.
	RuleDefinition *RuleDefinition `json:"ruleDefinition,omitempty"`
}

// Identifier for a single stateless rule group, used in a firewall policy to
// refer to the rule group.
type StatelessRuleGroupReference struct {
	Priority    *int64  `json:"priority,omitempty"`
	ResourceARN *string `json:"resourceARN,omitempty"`
}

// Stateless inspection criteria. Each stateless rule group uses exactly one
// of these data types to define its stateless rules.
type StatelessRulesAndCustomActions struct {
	CustomActions  []*CustomAction  `json:"customActions,omitempty"`
	StatelessRules []*StatelessRule `json:"statelessRules,omitempty"`
}

// The ID for a subnet that you want to associate with the firewall. This is
// used with CreateFirewall and AssociateSubnets. AWS Network Firewall creates
// an instance of the associated firewall in each subnet that you specify, to
// filter traffic in the subnet's Availability Zone.
type SubnetMapping struct {
	SubnetID *string `json:"subnetID,omitempty"`
}

// The status of the firewall endpoint and firewall policy configuration for
// a single VPC subnet.
//
// For each VPC subnet that you associate with a firewall, AWS Network Firewall
// does the following:
//
//    * Instantiates a firewall endpoint in the subnet, ready to take traffic.
//
//    * Configures the endpoint with the current firewall policy settings, to
//    provide the filtering behavior for the endpoint.
//
// When you update a firewall, for example to add a subnet association or change
// a rule group in the firewall policy, the affected sync states reflect out-of-sync
// or not ready status until the changes are complete.
type SyncState struct {
	// The configuration and status for a single subnet that you've specified for
	// use by the AWS Network Firewall firewall. This is part of the FirewallStatus.
	Attachment *Attachment                 `json:"attachment,omitempty"`
	Config     map[string]*PerObjectStatus `json:"config,omitempty"`
}

// TCP flags and masks to inspect packets for, used in stateless rules MatchAttributes
// settings.
type TCPFlagField struct {
	Flags []*string `json:"flags,omitempty"`
	Masks []*string `json:"masks,omitempty"`
}

// A key:value pair associated with an AWS resource. The key:value pair can
// be anything you define. Typically, the tag key represents a category (such
// as "environment") and the tag value represents a specific value within that
// category (such as "test," "development," or "production"). You can add up
// to 50 tags to each AWS resource.
type Tag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}
